#include "Circle.h"
#include "Triangle.h"
#include "Rectangle.h"

int main ()
{
	Rectangle rec(7, 8);
	Triangle tr(3, 4, 5);
	Circle cir(8);
	cout << rec << endl;
	cout << tr << endl;
	cout << cir << endl;
}



#pragma once
#include <iostream>
#include <cmath>
using namespace std;

class Geometric_figures
{
protected:
	const double PI = 3.14159;
public:
	/**
	 \brief	Виртуальный деструктор
	 */
	virtual ~Geometric_figures() = 0;
	/**
	 \brief	Виртуальный метод периметра
	 */
	virtual double get_perimeter() = 0;
	/**
	 \brief	Виртуальный метод площади
	 */
	virtual double get_area() = 0;
};





#include "Geometric_figures.h"

Geometric_figures::~Geometric_figures() {};



#pragma once
#include "Geometric_figures.h"
class Rectangle :public Geometric_figures
{
private:
	double height, width;
	/**
	 \brief	Принимает стороны
	 */
	void set_sides(const double height, const double width);
public:
	/**
	 \brief	Конструктор с параметрами
	 */
	explicit Rectangle(const double height, const double width);
	/**
	 \brief	Виртуальный деструктор
	 */
	virtual ~Rectangle();
	/**
	 \brief	Оператор сдвига
	 */
	friend ostream& operator<<(ostream& out, Rectangle& rec);
	/**
	 \brief	Получает периметр
	 */
	double get_perimeter()override;
	/**
	 \brief	Получает площадь
	 */
	double get_area()override;
};





#include "Rectangle.h"

void Rectangle::set_sides(const double height, const double width)
{
	if (height > 0 && width > 0)
	{
		this->height = height;
		this->width = width;
	}
	else
	{
		throw invalid_argument("Неверные значения");
	}
}
Rectangle::Rectangle(const double height, const double width)
{
	set_sides(height, width);
}
Rectangle::~Rectangle() {};
ostream& operator<<(ostream& out, Rectangle& rec)
{
	out << "Perimeter = " << rec.get_perimeter() << endl;
	out << "Area = " << rec.get_area() << endl;
	return out;
}
double Rectangle::get_perimeter()
{
	return height * 2 + width * 2;
}
double Rectangle::get_area()
{
	return height * width;
}



#pragma once
#include "Geometric_figures.h"
class Triangle :public Geometric_figures
{
private:
	double a,b,c;
	/**
	 \brief	Принимает стороны
	 */
	void set_sides(const double a, const double b, const double c);
public:
	/**
	 \brief	Конструктор с параметрами
	 */
	explicit Triangle(const double a, const double b, const double c);
	/**
	 \brief	Виртуальный деструктор
	 */
	virtual ~Triangle();
	/**
	 \brief	Оператор сдвига
	 */
	friend ostream& operator<<(ostream& out, Triangle& tr);
	/**
	 \brief	Получает периметр
	 */
	double get_perimeter()override;
	/**
	 \brief	Получает площадь
	 */
	double get_area()override;
};





#include "Triangle.h"

void Triangle::set_sides(const double a, const double b, const double c)
{
	if ((a > 0 && b > 0 && c > 0) && a + b > c && b + c > a && a + c > b)
	{
		this->a = a;
		this->b = b;
		this->c = c;
	}
	else
	{
		throw invalid_argument("Неверные значения");
	}
}
Triangle::Triangle(const double a, const double b, const double c)
{
	set_sides(a, b, c);
}
Triangle::~Triangle() {};
ostream& operator<<(ostream& out, Triangle& tr)
{
	out << "Perimeter = " << tr.get_perimeter() << endl;
	out << "Area = " << tr.get_area() << endl;
	return out;
}
double Triangle::get_perimeter()
{
	return a + b + c;
}
double Triangle::get_area()
{
	double p = this->get_perimeter() / 2.0;
	return sqrt(p * (p - a) * (p - b) * (p - c));
}



#pragma once
#include "Geometric_figures.h"
class Circle :public Geometric_figures
{
private:
	double radius;
	/**
	 \brief	Принимает стороны
	 */
	void set_radius(const double radius);
public:
	/**
	 \brief	Конструктор с параметрами
	 */
	explicit Circle(const double radius);
	/**
	 \brief	Виртуальный деструктор
	 */
	virtual ~Circle();
	/**
	 \brief	Оператор сдвига
	 */
	friend ostream& operator<<(ostream& out, Circle& circ);
	/**
	 \brief	Получает периметр
	 */
	double get_perimeter()override;
	/**
	 \brief	Получает площадь
	 */
	double get_area()override;
};



#include "Circle.h"

void Circle::set_radius(const double radius)
{
	if (radius > 0)
	{
		this->radius = radius;
	}
	else
	{
		throw invalid_argument("Неверные значения");
	}
}
Circle::Circle(const double radius)
{
	set_radius(radius);
}
Circle::~Circle() {};
ostream& operator<<(ostream& out, Circle& circ)
{
	out << "Perimeter = " << circ.get_perimeter() << endl;
	out << "Area = " << circ.get_area() << endl;
	return out;
}
double Circle::get_perimeter()
{
	return 2.0 * PI * radius;
}
double Circle::get_area()
{
	return PI * pow(radius, 2);
}